import os
import rtconfig
from building import *

Import('SDK_LIB')

cwd = GetCurrentDir()

# add general drivers
src = Split('''
board.c
CubeMX_Config/Src/stm32f4xx_hal_msp.c
''')

if GetDepend(['BSP_USING_SPI_FLASH']):
    src += Glob('ports/spi_flash/spi_flash_init.c')

if GetDepend(['FAL_USING_SFUD_PORT']):
    src += Glob('ports/fal_config/fal_flash_sfud_port.c')

if GetDepend(['RT_USING_DFS']):
    src += Glob('ports/fal_config/fal_filesystem_init.c')


if GetDepend(['BSP_USING_I2C']):
    src += Glob('ports/i2c/i2c_port.c')

path =  [cwd]
path += [cwd + '/CubeMX_Config/Inc']
path += [cwd + '/ports']

if GetDepend(['BSP_USING_SPI_FLASH']):
    path += [cwd + '/ports/spi_flash']

if GetDepend(['PKG_USING_FAL']):
    path += [cwd + '/ports/fal_config']

if GetDepend(['BSP_USING_SDRAM']):
    path += [cwd + '/ports/sdram']

if GetDepend(['BSP_USING_LCD']):
    path += [cwd + '/ports/lcd']

if GetDepend(['BSP_USING_I2C']):
    path += [cwd + '/ports/i2c']

if GetDepend(['BSP_USING_SPI']):
    path += [cwd + '/ports/spi']
   
startup_path_prefix = SDK_LIB

if rtconfig.CROSS_TOOL == 'gcc':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/gcc/startup_stm32f429xx.s']
elif rtconfig.CROSS_TOOL == 'keil':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/arm/startup_stm32f429xx.s']
elif rtconfig.CROSS_TOOL == 'iar':
    src += [startup_path_prefix + '/STM32F4xx_HAL/CMSIS/Device/ST/STM32F4xx/Source/Templates/iar/startup_stm32f429xx.s']

# STM32F405xx) || STM32F415xx) || STM32F407xx) || STM32F417xx)
# STM32F427xx) || STM32F437xx) || STM32F429xx) || STM32F439xx)
# STM32F401xC) || STM32F401xE) || STM32F410Tx) || STM32F410Cx)
# STM32F410Rx) || STM32F411xE) || STM32F446xx) || STM32F469xx)
# STM32F479xx) || STM32F412Cx) || STM32F412Rx) || STM32F412Vx)
# STM32F412Zx) || STM32F413xx) || STM32F423xx)
# You can select chips from the list above
CPPDEFINES = ['STM32F429xx']
group = DefineGroup('Drivers', src, depend = [''], CPPPATH = path, CPPDEFINES = CPPDEFINES)

Return('group')
